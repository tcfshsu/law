@page "/laws/s" 
@inject HttpClient Http 
@inject NavigationManager N 

<div class="bread">
    <span>現在位置：</span>
    <ul>
        <li><a href="">首頁</a></li>
        <li><a href="laws">法規查詢</a></li>
        <li></li>
    </ul>
</div>

<br class="printNoDisplay" />
<a class="printNoDisplay" href="">回上頁</a>

@code 
{
    private LawRoot[]? laws ; 
    public string? a , b , c , d , e , f , g ; 
    public int aa = 0 ; 
    public int[]? artNo ; 
    public L l = new L() ; 
    public List<A> aq = new List<A>() ; 
    protected override void OnInitialized()
    {
        var uri = N.ToAbsoluteUri(N.Uri);
        var queryStrings = QueryHelpers.ParseQuery(uri.Query);
        if (queryStrings.TryGetValue("a", out var aaa))
        {
            a = aaa;
        }
        if (queryStrings.TryGetValue("q", out var bbb))
        {
            b = bbb;
        }
        if (queryStrings.TryGetValue("c", out var ccc))
        {
            c = ccc;
        }
        if (queryStrings.TryGetValue("l", out var ddd))
        {
            d = ddd;
        }
        if (queryStrings.TryGetValue("ab", out var eee))
        {
            e = eee;
        }
        if (queryStrings.TryGetValue("v", out var fff))
        {
            f = fff;
        }
        if (queryStrings.TryGetValue("string", out var ggg))
        {
            g = ggg;
        }
        aa = Int32.Parse( Regex.Replace( a.ToUpper() , @"[CXLJE]"  , "" ) ) - 1 ; 
    }
    protected override async Task OnInitializedAsync()
    {
        laws = await Http.GetFromJsonAsync<LawRoot[]>("json/laws.json");
        if( laws != null ) 
        {
            l = laws[0].Laws.Where( l => string.IsNullOrEmpty( a ) ? false : ( Regex.Replace( a.ToUpper() , @"[^CXLJE]"  , "" ).ToUpper() == "E" ? l.LawCategory.Contains( "選舉法規" ) : ( Regex.Replace( a.ToUpper() , @"[^CXLJE]"  , "" ).ToUpper() == "C" ? ( !l.LawCategory.Contains( "選舉法規" ) && l.LawCategory.Contains( "中央法規" ) ) : ( Regex.Replace( a.ToUpper() , @"[^CXLJE]"  , "" ).ToUpper() == "X" ? ( !l.LawCategory.Contains( "選舉法規" ) && l.LawCategory.Contains( "行政法規" ) ) : ( Regex.Replace( a.ToUpper() , @"[^CXLJE]"  , "" ).ToUpper() == "L" ? ( !l.LawCategory.Contains( "選舉法規" ) && l.LawCategory.Contains( "立法法規" ) ) : ( Regex.Replace( a.ToUpper() , @"[^CXLJE]"  , "" ).ToUpper() == "J" ? ( !l.LawCategory.Contains( "選舉法規" ) && l.LawCategory.Contains( "司法法規" ) ) : false  ) ) ) ) ) ).ToArray()[aa] ; 
        }
    }

    public class LawRoot
    {
        public L[] Laws { get; set; }
    }
    public class L
    {
        public string LawCategory { get; set; }
        public string? LawForeword { get; set; }
        public A[] LawArticles { get; set; }
        public bool Contains( string a ) 
        {
            if( string.IsNullOrEmpty( LawForeword ) ? false : LawForeword.ToUpper().Contains( a ) ) 
            {
                return true ; 
            }
            foreach( var art in LawArticles ) 
            {
                if( art.ArticleType.ToUpper().Contains( a ) || ( string.IsNullOrEmpty( art.ArticleNo ) ? false : art.ArticleNo.ToUpper().Contains( a ) ) || art.ArticleContent.ToUpper().Contains( a ) ) 
                {
                    return true ; 
                }
            }
            return false ; 
        }
    }
    public class A
    {
        public string ArticleType { get; set; }
        public string? ArticleNo { get; set; }
        public string ArticleContent { get; set; }
        public string ShowNum() 
        {
            int i = 0 ; 
            foreach( var a in ArticleContent.Split( "\r\n" ) ) 
            {
                if( !Regex.IsMatch( a , @"^([1-9]{1}[0-9]+、|[1-9]{1}、|[１-９]{1}[０-９]+、|[１-９]{1}、|[1-9]{1}[0-9]+\u002E|[1-9]{1}\u002E|[１-９]{1}[０-９]+\u002E|[１-９]{1}\u002E|（[一二三四五六七八九十]{1}[一二三四五六七八九○零十百]+）|（[一二三四五六七八九十]{1}）|（[1-9]{1}[0-9]+）|（[1-9]{1}）|（[１-９]{1}[０-９]+）|（[１-９]{1}）|[一二三四五六七八九十]{1}[一二三四五六七八九○零十百]+、|[一二三四五六七八九十]{1}、)" ) ) 
                {
                    i ++ ; 
                }
            }
            return i > 1 ? "showNum" : "" ; 
        }
        public bool Contains( string a ) 
        {
            if( Regex.IsMatch( a , @"([(].+[)])|[+\-&]" ) ) 
            {}
            else if( Regex.IsMatch( a , @"\s" ) ) 
            {
                foreach( var aa in Regex.Split( a , @"\s" ) ) 
                {
                    if( ( !string.IsNullOrEmpty( ArticleNo ) && ArticleNo.Contains( "【" ) ) ? ArticleNo.Split( "【" )[1].Replace( "】" , "" ).ToUpper().Contains( a ) : false ) 
                    {
                        return true ; 
                    }
                    else if( ArticleContent.ToUpper().Contains( a ) ) 
                    {
                        return true ; 
                    }
                }
            }
            else 
            {
                return ( ArticleContent.ToUpper().Contains( a ) || ( ( !string.IsNullOrEmpty( ArticleNo ) && ArticleNo.Contains( "【" ) ) ? ArticleNo.Split( "【" )[1].Replace( "】" , "" ).ToUpper().Contains( a ) : false ) ) ; 
            }
            return false ; 
        }
    }
}